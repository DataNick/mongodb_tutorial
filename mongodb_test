use wands #creates a db called wands

db.wands.find() #finds all items in wands database

db.wands.insert(
  { name: "Potion N. 09",
    author: "Lazarus Nimbleton"},
  { name: "Sleepy Time",
    author: "Roland Beschel"}
) #inserts objects into database

db.wands.remove({name: "Love"})

#update fields for first matching document

db.wands.update(
query parameter,
update parameter (begin with a $)
)

db.wands.update(
{name: "Love"},
{"$set": {price: 9.99}},
{"multi": false (by default)})

{"$inc": {"count": 1}}
{upsert: true}

#to perform multiple updates, include third parameter (options parameter)

#will find document with name of love and replace entire document with price
db.wands.update(
{name: "Love"},
{price: 9.99})


#Update operators

$unset operator

db.potions.update(
{} #selects all documents in potions collection,
{"$unset": "color": "" #remove colour field},
{"multi": true}
)

#rename fields

Use the $rename update operator
db.potions.update(
{} #selects all documents in potions collection,
{"$rename": {"score" : "grade" #rename field to grade}},
{"multi": true}
)

#if a field has array values, there is a way to select and change values within arrays
#use dot notation and update them individually
#specify field name and the index of item that is to be modified

db.potions.update(
{"name": "Shrinking"},
{"$set": {"ingredients.1" : 42 }},
{"multi": true}
)

#but when we don't know the index of the value, then we use the positional operator
db.potions.update(
{"ingredients": "secret" #query for value we want to change},
{"$set": {"ingredients.$" : 42 }},
{"multi": true}
)


#updating embedded values

ratings: {
  flavour: 2,
  scent: 4,
  strength: 5
}

db.potions.update(
  {"name": "Shrinking"},
  {"$set": {"ratings.strength" : 5}}
  )

#Other update operators

$max --> allows for the updating of a value only if it is greater than current value or inserts if empty
$min --> allows to update if the new value only if it is lesser than current value or inserts if empty
$mul --> multiplies current field value by a specified value. If empty, inserts 0.

Arrays are common ways to store data
$pop --> remove first or last value in array
$push --> add values to end of array
$pull --> removes all instances of a specified value from an array
$addToSet --> only adds value if not already present

db.potions.update(
  {"name": "Shrinking"},
  {"$mul": {"ratings.strength" : 10}} #this will set the strength to 50
  )

#query operators and customizing results
#filtering --> passing multiple queries to find method

db.potions.find(
  {
  "vendor": "Kettlecooked",
  "ratings.strength": 5
  }
)

#query based on conditions i.e. price less than 20
comparison query operators
$gt
$lt
$gte
$lte
$ne
db.potions.find(
  {"price": {"$lt": 20}}
)

db.potions.find(
  {"price": {"$gt": 10, "$lt": 20}}
)

$elemMatch
ensure at least 1 element in an array matches all criteria
db.potions.find(
  {"price": {"$elemMatch": {"$gt": 10, "$lt": 20}}}
)

arrays act differently with range criteria than normal values
Running a query on an array -->
each value in array is checked individually. If at least 1 array value is true for each criteria, the entire document matches.
The document will not match if only 1 criteria is met.
Whenever dealing with ranges in an array, always use an array query operator

db.wands.find(
  {"maker": {"$ne": "Foxmond"},
  "level_required": {"$lte": 75},
  "price": {"$lt": 50},
  "lengths": {"$elemMatch": {"$gte": 3, "$lte": 4}}
  }
)

#projections to select items based on conditions and only return certain fields
db.potions.find(
  {"grade": {"$gte": 10}},
  {"vendor": true, "name": true}
)

#return all fields except those set to false
db.potions.find(
  {"grade": {"$gte": 10}},
  {"vendor": false, "name": false}
)

db.potions.find(
  {}, #selects all documents in potions collection
  {"name": true}
)

#select all records by using {}

#when running the find method, objects returned are cursor objects
#run methods on cursor objects
db.potions.find().count()
db.potions.find().sort({"price": 1}) #1 for ascending or -1 for descending
db.potions.find().limit()
db.potions.find().skip().limit() #will need to be changed for each page

db.wands.find(
  {},
  {"name": true, "powers": true, "_id": false}
).sort({"price": 1}) #sorting by price in ascending order


// How to best model data
i.e. USERS and their favourite POTIONS

#insertion through an embebbed document
data integrity - ensuring data is consistent
instead of embedding vendor information directly into potions document
create a vendors collection and reference vendor document in each potion document.
A step in normalizing data.
Document references are manual - mongodb only sees field value pairs.
To get vendor document, run query on potion to get vendor_id then run query on vendor with id equal to vendor_id to get document in vendor collection

Embedding vs Referencing
Embedding allows for one query action
Atomic writes -> for updating, for example, multiple fields, either all changes would occur on nothing would be updated. Ensures document write completely happens or cancels everything

Referencing requires multiple queries
Reference documents are independent documents
Ideal for data that occasionally is used together but sometimes stands alone.
Only need to update vendor information in one place
Reduce inconsistencies
Cannot atomically write to multiple documents
In RDM, this is called a transaction, which MongoDB does not support by default
If updating a new potion from a new vendor, if updating the potion is written but the vendor update hits an error, no rollback would occur
There would be a potion document where the vendor is non-existent. When trying to use vendor_id, an error would occur. However, in the potion document, the reference (vendor_id) would exist on a non-existent vendor --> PROBLEMS

foreign_key_id is a referenced object
placing an object directly inside of another document is an embedded document

Embedded modeling is great for getting all the required data in one query, supporting atomic writes and ideal for data that is strongly related
Embedded documents are referenced through their parent
Considering embedding is usually best starting point

Reference modeling doesn't have default atomic writes across multiple documents and should be used carefully.
Documents exist independently

Complex relationships call for relational databases

One-To-Many Relationship
How to add commenting to potions for reviews
Potions will have many Comments and each comment will belong to Users

Questions to decide on Embedding or Referencing Documents
1. How will data be used?
  Used together (embedded) which will be faster or used separately or rarely (referenced)

2. What's the size of the data?
  a) Less than 100 or more than 100 -> Embedded
  b) More than 100 -> Referenced
  c) Over 1000 -> Referenced

  If the size is too big and data is embedded, there may be a decline in read performance
  If comments on the potions page is below 100, it's enough to use embedding
  If the comments grow to be more substantial that embedding is too inefficient, time to fix how you are modeling the data

3. Will the data change often?
  Embedding data can lead to duplication
  a) If the data never changes -> Embedded (data duplication is ok if not expected to change)
  b) If changes occasionally -> Embedded or Referenced (Want overhead of managing data duplication?)
  c) If data is constantly changing -> Referenced (prevents inconsistencies)

Comments on Potions are not expected to change often so alright to store them as embedded documents

Comments belong to Users. Users may change certain attributes about themselves regularly.
Comments have foreign key id for their users.

Store comments as embedded documents in potions.
  Don't change often
  Use both documents together often
  There will be less than 100 comments per potions

Store Users and foreign key (by reference) in Comments
  Only need username for each comment
  Embedding user documents could lead to duplication issues

// Common Aggregations
Finding number of potions per vendor
db.potions.find({}, {"name": true, "vendor": true})
This would manually pull all the data and count everything

Let MongoDB handle everything because it comes with aggregation framework
This allows for the manipulation of data BEFORE retrieval
#aggregate =  combining data
db.potions.aggregate(
  [{"$group": {"_id": "$vendor_id"}}]
)
set _id to field name we want to group by
#takes an array as parameter; stage operators (stage operators start with $ sign) as parameters
# field names that begin with '$' are called field paths and link to a field in a document

#fields beginning with "$" will perform some task like grouping or summing
#values beginning with "$", then it is a field path that is pointing to the value of specified field

Most of our users only care about the magic damage for their wand. After all, what's the point of doing awesome spells at low levels? Let's find out how many wands we have for each damage.magic score.

db.wands.aggregate(
  [{"$group": {"_id": "$damage.magic", "wand_count": {"$sum": 1}}}]
)

db.wands.aggregate(
  [{"$group": {"_id": "$maker", "total_cost": {"$sum": "$price"}}}]
)

db.wands.aggregate(
  [{"$group": {"_id": "$level_required", "price_average": {"$avg": "$price"}}}]
)

db.wands.aggregate(
  [{"$group": {"_id": "$maker",
  "total_wands": {"$sum": 1},
  "max_magic": {"$max": "$damage.magic"},
  "lowest_price": {"$min": "$price"}}}]
)

//The Aggregation Pipeline
Conditional vendor information
1) Query potions
2) Group by vendor
3) Sum the number of potions per vendor

The Aggregate Method as a Pipeline -->
  Pass data through many stages in order to change it along the way
  Add multiple stage operators for data to pass through

Each stage modifies the working data set and passes the altered documents to the next stage until reaching the desired result

//Stage operators
$group
$match - normal query; only pass documents to next stage if they meet specified conditions; use $match early to reduce number of documents to run queries on and improve performance; may be used multiple time to continually remove data.
db.wands.aggregate([
  {"$match": {"ingredients": "unicorn"}},
  {"$group":
    {"_id": "$maker",
    "total_wands": {"$sum": 1},
    "max_magic": {"$max": "$damage.magic"},
    "lowest_price": {"$min": "$price"}
    }
  }
  ]
)
$sort
$limit
$redact
$project - Reshapes each document in the stream, such as by adding new fields or removing existing fields. For each input document, outputs one document; common to use $project, along with $match, multiple times to cut down on data
$skip
$unwind
$out
$geoNear

Top 3 potions with price less than $15
1) Query for potions with price less than $15
2) Group potions by vendor and average their grades
3) Sort the results by grade average
4) Limit results to 3 vendors

db.potions.aggregate([
  {"$match": {"price": {"$lt": 15}}},
  {"$project": {"_id": false, "vendor_id": true, "grade": true}}, #this will limit the fields we send over
  {"$group":
  {"_id": "$vendor_id", #setting group key to vendor field path
  "avg_grade": {"$avg": "$grade"}}},
  {"$sort": {"avg_grade": -1}}, #sort from highest to lowest
  {"$limit": 3}
])


























