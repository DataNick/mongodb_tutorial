use wands #creates a db called wands

db.wands.find() #finds all items in wands database

db.wands.insert(
  { name: "Potion N. 09",
    author: "Lazarus Nimbleton"},
  { name: "Sleepy Time",
    author: "Roland Beschel"}
) #inserts objects into database

db.wands.remove({name: "Love"})

#update fields for first matching document

db.wands.update(
query parameter,
update parameter (begin with a $)
)

db.wands.update(
{name: "Love"},
{"$set": {price: 9.99}},
{"multi": false (by default)})

{"$inc": {"count": 1}}
{upsert: true}

#to perform multiple updates, include third parameter (options parameter)

#will find document with name of love and replace entire document with price
db.wands.update(
{name: "Love"},
{price: 9.99})


#Update operators

$unset operator

db.potions.update(
{} #selects all documents in potions collection,
{"$unset": "color": "" #remove colour field},
{"multi": true}
)

#rename fields

Use the $rename update operator
db.potions.update(
{} #selects all documents in potions collection,
{"$rename": {"score" : "grade" #rename field to grade}},
{"multi": true}
)

#if a field has array values, there is a way to select and change values within arrays
#use dot notation and update them individually
#specify field name and the index of item that is to be modified

db.potions.update(
{"name": "Shrinking"},
{"$set": {"ingredients.1" : 42 }},
{"multi": true}
)

#but when we don't know the index of the value, then we use the positional operator
db.potions.update(
{"ingredients": "secret" #query for value we want to change},
{"$set": {"ingredients.$" : 42 }},
{"multi": true}
)


#updating embedded values

ratings: {
  flavour: 2,
  scent: 4,
  strength: 5
}

db.potions.update(
  {"name": "Shrinking"},
  {"$set": {"ratings.strength" : 5}}
  )

#Other update operators

$max --> allows for the updating of a value only if it is greater than current value or inserts if empty
$min --> allows to update if the new value only if it is lesser than current value or inserts if empty
$mul --> multiplies current field value by a specified value. If empty, inserts 0.

Arrays are common ways to store data
$pop --> remove first or last value in array
$push --> add values to end of array
$pull --> removes all instances of a specified value from an array
$addToSet --> only adds value if not already present


